
==================== FINAL INTERFACE ====================
2017-01-18 05:02:10.079863 UTC

interface main@main:Helper 8001
  interface hash: fc1f9f94c56c6bf500d8e26a4b1e6c16
  ABI hash: 26e1b0b07c9998829b0028390d7eccd3
  export-list hash: c615c1469b95e6b06f96703f7f6b879c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5855f7c79c4a7b1ab9200afca90b538b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Helper.availableBoard
  Helper.availableSelectNum
  Helper.failed_all_get
  Helper.failed_solve
  Helper.getAllNp
  Helper.getGroup
  Helper.getGroups
  Helper.getNp
  Helper.getSelectNp
  Helper.handleNP
  Helper.isNineList
  Helper.isNotOverlapList
  Helper.isOverlapList
  Helper.notAvailableBoardErrorRes
  Helper.not_available_board
  Helper.not_available_page
  Helper.not_exist
  Helper.parseErrorRes
  Helper.parse_error
  Helper.rotateBoard
  Helper.solveBoard
  Helper.solveErrorRes
  Helper.succesSolveRes
  Helper.succes_solve
  Helper.success_all_get
  Helper.success_id_get
  Helper.tooManySolvedRes
  Helper.too_many_solved
module dependencies: BoardModel DB NumberPlace Parser
package dependencies: aeson-0.11.2.1@aeson-0.11.2.1-7upVB3k6XZaETFQEHHKnl
                      aeson-compat-0.3.6@aeson-compat-0.3.6-E41ehkTzXoOGdiPpKt9DSo
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.0.2@attoparsec-0.13.0.2-GLM6q4XQBSiI4fJOXoBxlu
                      auto-update-0.1.4@auto-update-0.1.4-GAesfFmqoZzBz6e09kRyzb
                      base-4.9.0.0
                      base-compat-0.9.1@base-compat-0.9.1-tmPpmtbHbvIDjFWbkjGrR
                      base16-bytestring-0.1.1.6@base16-bytestring-0.1.1.6-5dPoF8dzhwzBaEB2MvnmIS
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-In9M41tLtcS9QYt3QpGpNY
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-KWDLbdBYSBoALiMW0LHIz1
                      blaze-html-0.8.1.2@blaze-html-0.8.1.2-2kD96kJB6JEGow1dP8IL6C
                      blaze-markup-0.7.1.0@blaze-markup-0.7.1.0-5a5pBG0fO8kJX4ke3K7j3D
                      blaze-textual-0.2.1.0@blaze-textual-0.2.1.0-5TvXaG25I6S46sBk67LFXf
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      conduit-1.2.7@conduit-1.2.7-AT81Epeipx6C4wqHn3FXor
                      conduit-extra-1.1.13.2@conduit-extra-1.1.13.2-HFYphC0EojhHqAnIEx6Pp5
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      easy-file-0.2.1@easy-file-0.2.1-bAUkz2rC2kFhBbPjw2Of5
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      fast-logger-2.4.6@fast-logger-2.4.6-HRSjyxgqsD189veq1dYWk7
                      filepath-1.4.1.0@filepath-1.4.1.0
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      http-api-data-0.2.4@http-api-data-0.2.4-3jwS7OrPl3l4oJfG3gRZ5C
                      integer-gmp-1.0.0.1
                      lifted-base-0.2.3.8@lifted-base-0.2.3.8-KLkd0w1UJqu6nE8oVTTEBy
                      mmorph-1.0.6@mmorph-1.0.6-3xsw6wg6Vs2JmwrJVsaYA0
                      monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT
                      monad-logger-0.3.19@monad-logger-0.3.19-3KRgH6CniDbKll7yTf1WEI
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mysql-0.1.4@mysql-0.1.4-DimPIfooGGHJabUPWkGGxx
                      mysql-simple-0.4.0.0@mysql-simple-0.4.0.0-F3ihRMN9bUm2a7nW34P6dx
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      path-pieces-0.2.1@path-pieces-0.2.1-EQ6YdjSujhVE8ECatsqK1q
                      pcre-light-0.4.0.4@pcre-light-0.4.0.4-IQAaYrFkWFB49U9V8o5b8j
                      persistent-2.6@persistent-2.6-K8vKePxqYMYCHnPZAeFsgJ
                      persistent-mysql-2.6@persistent-mysql-2.6-D4rn3O1h40BIaXYsqp0jgs
                      persistent-template-2.5.1.6@persistent-template-2.5.1.6-8iRn3xUlWkU9lhfp8lf0UX
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      resource-pool-0.2.3.2@resource-pool-0.2.3.2-9vTgJsy3ECMB5KkdzRIRAh
                      resourcet-1.1.7.5@resourcet-1.1.7.5-Gsc14LtMBpp2sQtbjwGHLc
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      silently-1.2.5@silently-1.2.5-Ek776fxSdtm4h8aXqt6CNw
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      stm-chans-3.0.0.4@stm-chans-3.0.0.4-4lLWE8CZnvmDZJW5bKkus1
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-1j5dGjxxtiTDuAsO86iSk0
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-25SoAegOdaF8rLEnnb5jPI
                      unix-2.7.2.0@unix-2.7.2.0
                      unix-time-0.3.7@unix-time-0.3.7-HcxGsrnTmTlC98pyanzoMW
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: aeson-0.11.2.1@aeson-0.11.2.1-7upVB3k6XZaETFQEHHKnl:Data.Aeson.Types.Generic
         aeson-0.11.2.1@aeson-0.11.2.1-7upVB3k6XZaETFQEHHKnl:Data.Aeson.Types.Instances
         attoparsec-0.13.0.2@attoparsec-0.13.0.2-GLM6q4XQBSiI4fJOXoBxlu:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.2@attoparsec-0.13.0.2-GLM6q4XQBSiI4fJOXoBxlu:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         persistent-2.6@persistent-2.6-K8vKePxqYMYCHnPZAeFsgJ:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.6@persistent-2.6-K8vKePxqYMYCHnPZAeFsgJ:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.6@persistent-2.6-K8vKePxqYMYCHnPZAeFsgJ:Database.Persist.Sql.Orphan.PersistUnique
         persistent-template-2.5.1.6@persistent-template-2.5.1.6-8iRn3xUlWkU9lhfp8lf0UX:Database.Persist.TH
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         unix-time-0.3.7@unix-time-0.3.7-HcxGsrnTmTlC98pyanzoMW:Data.UnixTime.Diff
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.0.2@attoparsec-0.13.0.2-GLM6q4XQBSiI4fJOXoBxlu:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         main@main:BoardModel main@main:DB
                         monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT:Control.Monad.Trans.Control
                         monad-logger-0.3.19@monad-logger-0.3.19-3KRgH6CniDbKll7yTf1WEI:Control.Monad.Logger
                         persistent-2.6@persistent-2.6-K8vKePxqYMYCHnPZAeFsgJ:Database.Persist.Class.PersistConfig
                         persistent-2.6@persistent-2.6-K8vKePxqYMYCHnPZAeFsgJ:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.6@persistent-2.6-K8vKePxqYMYCHnPZAeFsgJ:Database.Persist.Sql.Types.Internal
                         persistent-mysql-2.6@persistent-mysql-2.6-D4rn3O1h40BIaXYsqp0jgs:Database.Persist.MySQL
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         resourcet-1.1.7.5@resourcet-1.1.7.5-Gsc14LtMBpp2sQtbjwGHLc:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 96a214b84fd13ce168aecf88c70c8f1b
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Internal f0df474bf1747957504b03d816c8df3d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  BoardModel 369fc97e2ae72e2e014e94565c21f413
  exports: 530c6c41c1f3c5540c3e67b717f00824
  NP 7412c5d167ce542fc0fc7978998dd7c3
  NP bdc9920f74610a0acae02267e22457aa
  NPResponse e8bcd751a82ebf1a997f97ca6dba95c8
  NPResponse f3be8a8b028efe9854e47fd89c9c1bee
  NumberPlaces 3dcee22303d66aea4ba82a43e0abdd9c
  NumberPlaces b8668e263fd5ee666be019240d9c17a3
  decodeBiNp 1bc4fbc113e8b07b7dfd7d3434deb712
  decodeBliNp ef115674c271d684d6011c08036d738d
  numberPlacesError 7360ad31db64d9fe9b78e899c7dcd4f2
import  -/  DB 76e8d744869b07e8e26bf32e45f4aeee
  exports: 9b7dfb3eb7cd52fc3c95e8ff7c56f31e
  insertNP d8b604f9ee4a8697b6f10153d8afac04
  selectAllNP 2cfa92282dc51577beebb4a177cddd37
  selectNP ed6e40600d14e9905f66997e128cf00c
import  -/  NumberPlace 69c4e55a6d03edf87a3e98b4ed40f336
  exports: 54d1d91594347cf8e8ab468668fc7a64
  failedBoard 140754d98993f05da9e8a4e4175eaab1
  solver' ede6bb2f22320b9de159af6a05ee2baa
import  -/  Parser efc5b5d467b4a8d0c174dfb0f29c17e2
  exports: dd28f3c2faee807cddd4d7feb316b886
  parsePage 2fada7f9a69c9993f8359e1318277f45
6d7038f8b5221c725a3ab597150de5f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Helper.$trModule2
                   Helper.$trModule1) -}
2f33d447085e96805c3b8fefa79e179f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Helper"#) -}
bc20b5a128aa57800880622b4511d865
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
94eb913671a1fa6b8dcd5a385694dfaf
  $w$j ::
    [[GHC.Types.Int]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, BoardModel.NPResponse #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: [[GHC.Types.Int]])[OneShot]
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Helper.handleNP4
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Helper.availableBoard ww of wild {
                   GHC.Types.False
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Helper.handleNP3
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2, Helper.notAvailableBoardErrorRes #) }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Helper.handleNP2
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      let {
                        solvedBoard :: [NumberPlace.Board] = NumberPlace.solver' ww
                      } in
                      case GHC.List.$wlenAcc @ [[GHC.Types.Int]] solvedBoard 0# of ww2 {
                        DEFAULT
                        -> case (DB.insertNP1 ww solvedBoard)
                                  `cast`
                                (Trans
                                     (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R <()>_N)
                                     (GHC.Types.N:IO[0] <()>_R))
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           (# ipv4,
                              BoardModel.NPResponse
                                solvedBoard
                                Helper.succes_solve
                                Helper.parse_error #) }
                        0# -> (# ipv2, Helper.solveErrorRes #)
                        5#
                        -> (# ipv2,
                              BoardModel.NPResponse
                                solvedBoard
                                Helper.too_many_solved
                                Helper.parse_error #) } } } }) -}
a516124215d07429f7dcb15f5615975d
  $wavailableSelectNum ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww ww1) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww of wild1 {
                        DEFAULT
                        -> case ww1 of wild2 {
                             DEFAULT
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# wild1 0#) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# wild2 0#) }
                             -1# -> GHC.Types.False }
                        -1# -> GHC.Types.False } }) -}
a20d0e3e74c547254fff0c062e58ce78
  $wf :: GHC.Prim.Int# -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: [a]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0#) of wild {
                   GHC.Types.False
                   -> GHC.List.$wunsafeTake @ a 3# (Helper.$wunsafeDrop @ a ww w)
                   GHC.Types.True -> GHC.List.$wunsafeTake @ a 3# w }) -}
c4b5233c29dae9b834870dd41432f0c2
  $wgetGroup ::
    [[GHC.Types.Int]]
    -> GHC.Types.Int -> GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: [[GHC.Types.Int]])
                   (w1 :: GHC.Types.Int)
                   (ww :: GHC.Prim.Int#) ->
                 let {
                   f :: GHC.Types.Int
                   = case w1 of wild { GHC.Types.I# x ->
                     GHC.Types.I# (GHC.Prim.*# x 3#) }
                 } in
                 letrec {
                   go :: [[GHC.Types.Int]] -> [GHC.Types.Int]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [[GHC.Types.Int]]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Int
                       : y ys
                       -> case f of ww1 { GHC.Types.I# ww2 ->
                          GHC.Base.++
                            @ GHC.Types.Int
                            (Helper.$wf @ GHC.Types.Int ww2 y)
                            (go ys) } }
                 } in
                 go (Helper.$wf @ [GHC.Types.Int] (GHC.Prim.*# ww 3#) w)) -}
5cff25d3a3a97763850c69b9455bc714
  $wgo :: [[GHC.Types.Int]] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
cd55c4ecce29930771b38b6db73a33ca
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
aa9c2ffa405897d8d90755e62723b945
  availableBoard :: [[GHC.Types.Int]] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (board :: [[GHC.Types.Int]]) ->
                 case Helper.availableBoard_$sisOverlapList
                        (GHC.Base.map
                           @ [GHC.Types.Int]
                           @ GHC.Types.Bool
                           Helper.availableBoard1
                           board) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Helper.availableBoard_$sisOverlapList
                             (GHC.Base.map
                                @ [GHC.Types.Int]
                                @ GHC.Types.Bool
                                Helper.availableBoard1
                                (Helper.rotateBoard board)) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case Helper.availableBoard_$sisOverlapList
                                  (GHC.Base.map
                                     @ [GHC.Types.Int]
                                     @ GHC.Types.Bool
                                     Helper.availableBoard1
                                     (Helper.getGroups board)) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> Helper.isNineList board } } }) -}
06b684de668b6e49f5685223dc201541
  availableBoard1 :: [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: [GHC.Types.Int]) ->
                 Helper.availableBoard_$sisNotOverlapList
                   (GHC.List.filter @ GHC.Types.Int Helper.availableBoard2 x)) -}
ea7dbcf963bc48415ee8e4ffb08a0f45
  availableBoard2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (GHC.Classes.neInt Helper.succes_solve) -}
62873895ea22ef9a92a7237c295bfefb
  availableBoard_$sisNotOverlapList ::
    [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0a5c8131194f26da3399cdba31ce8b9d
  availableBoard_$sisOverlapList ::
    [GHC.Types.Bool] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b7dbfd72076f3990243ab7a128feff49
  availableSelectNum ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Helper.$wavailableSelectNum ww1 ww3 } }) -}
d2d1382f037d77d9c969ceb8f46548f5
  failed_all_get :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Helper.parse_error) -}
b00cc3193398976d13ecf17815afb733
  failed_solve :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
b0d041bbb748a829e2129d69ccbea6e3
  getAllNp :: GHC.Types.IO BoardModel.NumberPlaces
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Helper.getAllNp1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <BoardModel.NumberPlaces>_R)) -}
8d42b90f0c0fe8ab0c402f138bf81171
  getAllNp1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          BoardModel.NumberPlaces #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Control.Monad.Trans.Resource.runResourceT
                         @ (Control.Monad.Logger.NoLoggingT GHC.Types.IO)
                         @ [Database.Persist.Class.PersistEntity.Entity DB.NumberPlace]
                         DB.$s$fMonadBaseControlbNoLoggingT
                         DB.selectAllNP3
                           `cast`
                         (Trans
                              (<GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                               ->_R Trans
                                        (Sym (GHC.Types.N:IO[0]
                                                  <[Database.Persist.Class.PersistEntity.Entity
                                                      DB.NumberPlace]>_R))
                                        (Sym (Control.Monad.Logger.N:NoLoggingT[0]
                                                  <GHC.Types.IO>_R) <[Database.Persist.Class.PersistEntity.Entity
                                                                        DB.NumberPlace]>_N))
                              (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                        <Control.Monad.Logger.NoLoggingT GHC.Types.IO>_R
                                        <[Database.Persist.Class.PersistEntity.Entity
                                            DB.NumberPlace]>_N))))
                        `cast`
                      (Trans
                           (Control.Monad.Logger.N:NoLoggingT[0]
                                <GHC.Types.IO>_R <[Database.Persist.Class.PersistEntity.Entity
                                                     DB.NumberPlace]>_N)
                           (GHC.Types.N:IO[0]
                                <[Database.Persist.Class.PersistEntity.Entity DB.NumberPlace]>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   ipv2 :: [DB.NumberPlace]
                   = GHC.Base.map
                       @ (Database.Persist.Class.PersistEntity.Entity DB.NumberPlace)
                       @ DB.NumberPlace
                       DB.selectAllNP2
                       ipv1
                 } in
                 case GHC.List.$wlenAcc @ DB.NumberPlace ipv2 0# of ww2 {
                   DEFAULT
                   -> (# ipv, BoardModel.NumberPlaces ipv2 Helper.succes_solve #)
                   0#
                   -> (# ipv,
                         BoardModel.NumberPlaces ipv2 Helper.parse_error #) } }) -}
fe8377d7f70818f9f5b5dbed1a95d7a6
  getGroup ::
    [[GHC.Types.Int]]
    -> GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [[GHC.Types.Int]])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Helper.$wgetGroup w w1 ww1 }) -}
9f10f4628823faf6f625c7086601cabe
  getGroups :: [[GHC.Types.Int]] -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (board :: [[GHC.Types.Int]]) ->
                 let {
                   c :: GHC.Types.Int -> [[GHC.Types.Int]] -> [[GHC.Types.Int]]
                     {- Arity: 2, Strictness: <L,U(U)><L,U> -}
                   = \ (ds :: GHC.Types.Int) (ds1 :: [[GHC.Types.Int]])[OneShot] ->
                     GHC.Types.:
                       @ [GHC.Types.Int]
                       (Helper.$wgetGroup board ds 0#)
                       (GHC.Types.:
                          @ [GHC.Types.Int]
                          (Helper.$wgetGroup board ds 1#)
                          (GHC.Types.:
                             @ [GHC.Types.Int]
                             (Helper.$wgetGroup board ds 2#)
                             ds1))
                 } in
                 c Helper.succes_solve
                   (c Helper.parse_error
                      (c Helper.failed_solve (GHC.Types.[] @ [GHC.Types.Int])))) -}
17cc0516fede6185a0f4cfbe101deb1f
  getNp ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
    -> GHC.Base.Maybe BoardModel.NP
  {- Arity: 2, Strictness: <L,1*U(U,U,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (biBody :: Data.ByteString.Internal.ByteString)
                   (bliBody :: Data.ByteString.Lazy.Internal.ByteString) ->
                 case Data.ByteString.Lazy.Internal.eq
                        bliBody
                        Data.ByteString.Lazy.Internal.Empty of wild {
                   GHC.Types.False -> BoardModel.decodeBliNp bliBody
                   GHC.Types.True -> BoardModel.decodeBiNp biBody }) -}
e880babff4dc4651fe49364d43d4ad0b
  getSelectNp ::
    GHC.Base.String -> GHC.Types.IO BoardModel.NumberPlaces
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Helper.getSelectNp1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <BoardModel.NumberPlaces>_R)) -}
50aabdd261974c3bf22a3731bf643d7a
  getSelectNp1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          BoardModel.NumberPlaces #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (page :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   $w$j1 :: GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  BoardModel.NumberPlaces #)
                     {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Int#)[OneShot]
                       (ww1 :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# ww ww1) of wild {
                       GHC.Types.False -> (# eta, Helper.getSelectNp3 #)
                       GHC.Types.True
                       -> case ww of wild1 {
                            DEFAULT
                            -> case ww1 of wild2 {
                                 DEFAULT
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.>=# wild1 0#) of wild3 {
                                      GHC.Types.False -> (# eta, Helper.getSelectNp3 #)
                                      GHC.Types.True
                                      -> case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.>=# wild2 0#) of wild4 {
                                           GHC.Types.False -> (# eta, Helper.getSelectNp3 #)
                                           GHC.Types.True
                                           -> case DB.selectNP1
                                                     (GHC.Types.I# wild1)
                                                     (GHC.Types.I# wild2)
                                                     eta of ds1 { (#,#) ipv ipv1 ->
                                              case GHC.List.$wlenAcc
                                                     @ DB.NumberPlace
                                                     ipv1
                                                     0# of ww2 {
                                                DEFAULT
                                                -> (# ipv,
                                                      BoardModel.NumberPlaces
                                                        ipv1
                                                        Helper.succes_solve #)
                                                0# -> (# ipv, Helper.getSelectNp2 #) } } } }
                                 -1# -> (# eta, Helper.getSelectNp3 #) }
                            -1# -> (# eta, Helper.getSelectNp3 #) } }
                 } in
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ [GHC.Types.Int]
                         (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                         (Parser.parsePage2 @ ())
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <GHC.Base.String>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <[GHC.Types.Int]>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         page)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError [GHC.Types.Int]>_R) of wild {
                   Data.Either.Left ds -> $w$j1 -1# -1#
                   Data.Either.Right xs
                   -> case GHC.List.$wlenAcc @ GHC.Types.Int xs 0# of ww2 {
                        DEFAULT -> $w$j1 -1# -1#
                        2#
                        -> case GHC.List.$w!!
                                  @ GHC.Types.Int
                                  xs
                                  0# of ww { GHC.Types.I# ww1 ->
                           case GHC.List.$w!!
                                  @ GHC.Types.Int
                                  xs
                                  1# of ww3 { GHC.Types.I# ww4 ->
                           $w$j1 ww1 ww4 } } } }) -}
3c1e928af8e521ff0b0f2cdd4c2f49c7
  getSelectNp2 :: BoardModel.NumberPlaces
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (BoardModel.NumberPlaces
                   BoardModel.numberPlacesError1
                   Helper.parse_error) -}
a4973bfadf4a264c4ae29ada96b70a2c
  getSelectNp3 :: BoardModel.NumberPlaces
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (BoardModel.NumberPlaces
                   BoardModel.numberPlacesError1
                   Helper.failed_solve) -}
3e6806f13cb83361f31975198fb71aa6
  handleNP ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
    -> GHC.Types.IO BoardModel.NPResponse
  {- Arity: 3, Strictness: <L,U(U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Helper.handleNP1
                  `cast`
                (<Data.ByteString.Internal.ByteString>_R
                 ->_R <Data.ByteString.Lazy.Internal.ByteString>_R
                 ->_R Sym (GHC.Types.N:IO[0] <BoardModel.NPResponse>_R)) -}
9f31ab4422762be8b8626b06b579f0e5
  handleNP1 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, BoardModel.NPResponse #)
  {- Arity: 3, Strictness: <L,U(U,U,U,U)><L,U><S,U>,
     Unfolding: (\ (biBody :: Data.ByteString.Internal.ByteString)
                   (bliBody :: Data.ByteString.Lazy.Internal.ByteString)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "BIBody  is "#
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows8
                              (case biBody of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                               GHC.Show.showLitString
                                 (Data.ByteString.Internal.$wunpackAppendCharsLazy
                                    ww1
                                    ww2
                                    ww3
                                    ww4
                                    (GHC.Types.[] @ GHC.Types.Char))
                                 Helper.handleNP5 })))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "BLIBody is "#
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows8
                              (GHC.Show.showLitString
                                 (Data.ByteString.Lazy.Internal.unpackChars bliBody)
                                 Helper.handleNP5)))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.Internal.eq
                        bliBody
                        Data.ByteString.Lazy.Internal.Empty of wild {
                   GHC.Types.False
                   -> case BoardModel.decodeBliNp bliBody of wild1 {
                        GHC.Base.Nothing -> (# ipv2, Helper.parseErrorRes #)
                        GHC.Base.Just req
                        -> case req of ww { BoardModel.NP ww1 -> Helper.$w$j ww1 ipv2 } }
                   GHC.Types.True
                   -> case biBody of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                      case BoardModel.$wdecodeBiNp ww1 ww2 ww3 ww4 of wild1 {
                        GHC.Base.Nothing -> (# ipv2, Helper.parseErrorRes #)
                        GHC.Base.Just req
                        -> case req of ww7 { BoardModel.NP ww8 ->
                           Helper.$w$j ww8 ipv2 } } } } } }) -}
9e2894d4031bfc07488daa061c14772c
  handleNP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "availableBoard"#) -}
e09267dde7c4273a348143bac197f287
  handleNP3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "not availableBoard"#) -}
3f4df7468cb774701195bdc3ff0c9549
  handleNP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "check"#) -}
b4b1fe8a4d68a1fa0eb13dd39201cd5b
  handleNP5 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8ecd4f658b1bc69a1583e112849c0e99
  isNineList :: [[GHC.Types.Int]] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (board :: [[GHC.Types.Int]]) ->
                 case Helper.$wgo board 0# of ww {
                   DEFAULT -> GHC.Types.False 81# -> GHC.Types.True }) -}
506cdf5ce147b6f32250dfc3830bdaaf
  isNotOverlapList :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,C(C1(U)))><S,1*U> -}
afecf9323423d206d13464632d16d848
  isOverlapList :: GHC.Classes.Eq a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
8c710dae75f5b2a525a3f34e402e7762
  notAvailableBoardErrorRes :: BoardModel.NPResponse
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (BoardModel.NPResponse
                   Helper.solveErrorRes2
                   Helper.not_available_board
                   Helper.solveErrorRes1) -}
798e6c0cb8eeb9fead2048d5ad3a93cc
  not_available_board :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
bcfd066e5d01c34d8c955bff76b64aae
  not_available_page :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Helper.failed_solve) -}
12e2c149175291c5b3974873305a73ab
  not_exist :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Helper.parse_error) -}
3182fd7e166109d4ea9d2fd62c377f82
  parseErrorRes :: BoardModel.NPResponse
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (BoardModel.NPResponse
                   Helper.solveErrorRes2
                   Helper.parse_error
                   Helper.solveErrorRes1) -}
27c0c4d8a786c293a2fb2d49ccf75982
  parse_error :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
2006b9ee586f0cfbbd5ef2fb642b9493
  rotateBoard :: [[GHC.Types.Int]] -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (board :: [[GHC.Types.Int]]) ->
                 case GHC.List.$wlenAcc
                        @ [GHC.Types.Int]
                        board
                        0# of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># 0# y) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: GHC.Prim.Int# -> [[GHC.Types.Int]]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ [GHC.Types.Int]
                            (GHC.Base.map
                               @ [GHC.Types.Int]
                               @ GHC.Types.Int
                               (\ (ds :: [GHC.Types.Int]) -> GHC.List.$w!! @ GHC.Types.Int ds x)
                               board)
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x y) of wild1 {
                               GHC.Types.False -> go (GHC.Prim.+# x 1#)
                               GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Int] })
                      } in
                      go 0#
                   GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Int] } }) -}
1e32ddcb70edf6204fb82737e54c53a3
  solveBoard ::
    [[GHC.Types.Int]] -> GHC.Types.IO BoardModel.NPResponse
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Helper.solveBoard1
                  `cast`
                (<[[GHC.Types.Int]]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <BoardModel.NPResponse>_R)) -}
0bdd55d587428cbb3c6cd082f043555b
  solveBoard1 ::
    [[GHC.Types.Int]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, BoardModel.NPResponse #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (board :: [[GHC.Types.Int]])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   solvedBoard :: [NumberPlace.Board] = NumberPlace.solver' board
                 } in
                 case GHC.List.$wlenAcc @ [[GHC.Types.Int]] solvedBoard 0# of ww2 {
                   DEFAULT
                   -> case (DB.insertNP1 board solvedBoard)
                             `cast`
                           (Trans
                                (Control.Monad.Logger.N:NoLoggingT[0] <GHC.Types.IO>_R <()>_N)
                                (GHC.Types.N:IO[0] <()>_R))
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (# ipv,
                         BoardModel.NPResponse
                           solvedBoard
                           Helper.succes_solve
                           Helper.parse_error #) }
                   0# -> (# eta, Helper.solveErrorRes #)
                   5#
                   -> (# eta,
                         BoardModel.NPResponse
                           solvedBoard
                           Helper.too_many_solved
                           Helper.parse_error #) }) -}
736a47066067c6b3c0d7dbd352b9a416
  solveErrorRes :: BoardModel.NPResponse
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (BoardModel.NPResponse
                   Helper.solveErrorRes2
                   Helper.failed_solve
                   Helper.solveErrorRes1) -}
6b439bc8e3c496ed0984ff6ac1f0a3e8
  solveErrorRes1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
cd390b98276fd6916fac0126ef2a94f2
  solveErrorRes2 :: [[[GHC.Types.Int]]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [[GHC.Types.Int]]
                   NumberPlace.failedBoard
                   (GHC.Types.[] @ [[GHC.Types.Int]])) -}
4443e99f303e9ae1863d871b464006f4
  succesSolveRes ::
    [[[GHC.Types.Int]]] -> GHC.Types.Int -> BoardModel.NPResponse
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (boards :: [[[GHC.Types.Int]]]) (id :: GHC.Types.Int) ->
                 BoardModel.NPResponse boards Helper.succes_solve id) -}
4edfc128df12cae4f61a459aee0460fb
  succes_solve :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1afc0e10d0df2758ef67574a3c5a3ce5
  success_all_get :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Helper.succes_solve) -}
9fbbd679bdf69f0884e4096787dcdb78
  success_id_get :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Helper.succes_solve) -}
d93184910224d04272af472f06a558d6
  tooManySolvedRes ::
    [[[GHC.Types.Int]]] -> GHC.Types.Int -> BoardModel.NPResponse
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (boards :: [[[GHC.Types.Int]]]) (id :: GHC.Types.Int) ->
                 BoardModel.NPResponse boards Helper.too_many_solved id) -}
9fddf7021703c0555521ae985ae5e182
  too_many_solved :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
"SPEC isNotOverlapList @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                         GHC.Types.Int)
  Helper.isNotOverlapList @ GHC.Types.Int $dEq
  = Helper.availableBoard_$sisNotOverlapList
"SPEC isOverlapList @ Bool" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       GHC.Types.Bool)
  Helper.isOverlapList @ GHC.Types.Bool $dEq
  = Helper.availableBoard_$sisOverlapList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

